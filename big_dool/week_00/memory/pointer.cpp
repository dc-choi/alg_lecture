/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pointer.cpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: donchoi <donchoi@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/22 10:04:14 by donchoi           #+#    #+#             */
/*   Updated: 2022/12/22 10:21:49 by donchoi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<bits/stdc++.h>
using namespace std;

int main() {
	/**
	 * 포인터
	 * 메모리 주소를 다른 변수에 저장할 때 쓰는 타입
	 * 타입에 상관없이 해당 변수가 사용하는 첫 번째 바이트의 메모리 주소를 얻을 수 있다.
	 * 
	 * 포인터의 크기는 고정되어있지 않고 OS, 컴퓨터마다 다를 수 있음
	 * 보통 4바이트나 8바이트의 크기를 가짐
	*/
	int i = 0;
	int *a = &i;
	cout << &i << "\n";
	cout << a << "\n";

	/**
	 * 역참조 연산자
	 * '*'기호는 에스터리스크(asterisk operator)라고도 불림
	 * 
	 * C++에서 *라는 별표 기호는 사용하는 위치에 의해 다양한 용도로 사용
	 * 1. 이항 연산자로 사용하면 곱셈 연산
	 * 2. 포인터 타입의 선언
	 * 3. 역참조(dereference)로 메모리를 기반으로 변수의 값에 접근
	*/
	string b = "qwer";
	string *c = &b;
	cout << c << "\n";
	cout << *c << "\n";

	/**
	 * 화살표 연산자
	 * (pointer_name)->(variable_name)
	 * 
	 * 멤버변수가 있는 변수라면 역참조가 아닌 -> 화살표 연산자를 통해 해당 멤버변수를 끄집어낼 수 있습니다.
	 * 다음 예제에서 확인할 수 있음.
	*/
	pair<int, int> d = {1, 2};
	pair<int, int> * e = &d;
	cout << e -> first << "\n";
	cout << (*e).first << "\n";

	return 0;
}
