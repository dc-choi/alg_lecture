/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   stack.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: donchoi <donchoi@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/26 14:51:44 by donchoi           #+#    #+#             */
/*   Updated: 2022/12/26 14:57:34 by donchoi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<bits/stdc++.h>
using namespace std;

int main() {
	/**
	 * Stack
	 * LIFO(Last In First Out)의 특징을 가진 자료구조.
	 * 재귀적인 함수, 알고리즘에 사용되며 웹 브라우저 방문 기록 등에 사용됨.
	 * 삽입 및 삭제에 O(1), 탐색에 O(n)이 걸림.
	 * 
	 * 탐색에 O(n)이 걸리는 이유는 n번째 요소를 찾는다고 가정하면
	 * 계속해서 앞에 있는 요소를 끄집어내는 과정을 n번 반복해야 찾을 수 있기 때문이다.
	 * 
	 * 문자열 폭발, 아름다운 괄호만들기, 짝찾기 키워드를 기반으로 이루어진 문제에서 사용됨.
	 * 또한, “교차하지 않고” 라는 문장이 나오면 스택을 사용해야 하는 것은 아닐까? 염두해야 함.
	*/
	stack<string> stk;
	stk.push("최"); // 해당 값을 stack에 추가한다.
	stk.push("동");
	stk.push("철");
	stk.push("파");
	stk.push("이");
	stk.push("팅");

	while (stk.size()) { // 스택의 크기를 알 수 있다.
		cout << stk.top() << "\n"; // 가장 마지막에 있는 요소를 참조할 수 있다.
		stk.pop(); // 가장 마지막에 추가한 요소를 제거할 수 있다.
	}

	return 0;
}