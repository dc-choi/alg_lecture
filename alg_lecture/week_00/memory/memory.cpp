/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memory.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: donchoi <donchoi@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/22 09:31:04 by donchoi           #+#    #+#             */
/*   Updated: 2022/12/22 09:50:58 by donchoi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<bits/stdc++.h>
using namespace std;

int a; // BSS segment
int b = 0; // BSS segment
const int c = 1; // Data segment

int main() {
	/**
	 * C++은 개발자가 직접 필요한 메모리를 예약하고 해제할 수 있다.
	 * JAVA, Python, JavaScript은 가비지 컬렉션을 통해 이를 수행한다.
	*/

	// 4바이트의 메모리 공간을 차지한다.
	int i;
	// 16진수의 메모리 주소를 표기한다.
	// C++에서는 &연산자(ampersand, 앰퍼샌드)를 통해 변수의 주소를 얻을 수 있다.
	cout << &i << "\n";

	/**
	 * 코드를 작성해서 컴파일하고 프로그램을 실행시킬 때 어떠한 메모리에 할당되는가
	 * 
	 * 메모리 구조
	 * stack, heap, Data segment, BSS segment, code/text segment
	 * 
	 * 정적 할당
	 * 컴파일 단계에서 메모리를 할당하는 것
	 * BSS segment: 전역변수, static, const로 선언되고 0으로 초기화되거나 초기화가 되지 않은 변수가 이 메모리 영역에 할당
	 * Data segment: 전역변수, static, const로 선언되고 0이 아닌 값으로 초기화된 변수가 이 메모리 영역에 할당
	 * code/text segment: 프로그램의 코드가 들어감
	 * 
	 * 동적 할당
	 * 런타임 단계에서 메모리를 할당하는 것
	 * 
	 * Stack: 지역변수, 매개변수, 실행되는 함수에 의해 늘어나거나 줄어드는 메모리영역
	 * 함수가 호출될 때 마다 호출될 때 환경 등 특정 정보가 stack에 계속해서 저장됩니다.
	 * 또한, 재귀함수가 호출된다고 했을 때 새로운 스택 프레임이 매번 사용되기 때문에
	 * 함수내의 변수 집합이 해당 함수의 다른 인스턴스 변수를 방해하지 않습니다.
	 * 
	 * Heap: 동적으로 할당되는 변수들을 담습니다.
	 * malloc(), free()를 통해 관리할 수 있으며 동적으로 관리되는 자료구조의 경우 Heap영역을 사용합니다.
	 * 예를 들어 vector는 내부적으로 heap 영역을 사용합니다.
	*/

	return 0;
}
