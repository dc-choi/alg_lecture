/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   intro.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: donchoi <donchoi@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/23 20:46:43 by donchoi           #+#    #+#             */
/*   Updated: 2022/12/30 18:49:26 by donchoi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<bits/stdc++.h>
using namespace std;

int main() {
	/**
	 * 강의 200% 활용
	 * 1. 분류 보지말기
	 * 코테 문제를 봤을 때 이게 어떤 해결방법을 사용해야하는지 배우는게 목적임.
	 * 분류를 통해 무슨 유형인지 확인하면서 문제풀면 이 강의를 듣는 의미가 없음
	 * 2. 시간이 없을때
	 *  	1) 메모를 사용한다.
	 *  	아침에 문제보고 메모하고 퇴근후에 코딩하기
	 *  	주말에 열심히 하기
	 *  	2) 코테가 1달남았을 때
	 *  	교안을 3일만에 뚫고 4주차까지 진도나가면 턱걸이
	 *  	3) 강의를 다 들었을 때
	 *  	백준, 프로그래머스 계속 풀기
	 *  	삼성의 경우 Samsung Academy 풀기
	 * 3. 교안 똑바로 공부하는 법
	 *  	1) 교안만 보지말고 직접 쳐보면서 공부하기
	 *  	2) 더블 모니터가 있으면 더 쾌적한 환경에서 공부 가능
	 * 4. 질문하는 방법
	 * 백준에 공유하는 부분이 있는데, 그 링크를 공유하면서 질문하기
	*/

	/**
	 * 코테 언어로 C++이 좋은 이유
	 * 1. 빠르다
	 * 2. STL때문에 구현이 생각보다 쉬움
	 * 3. 수준급의 해설코드가 많음
	*/

	/**
	 * IT 대기업에 합격하는 방법
	 * 전략: 뽑히는 개발자가 아닌, 기업이 뽑아야 하는 개발자 (4가지 영역에서 어느정도 수준을 도달해야 함.)
	 * 1~4번순으로 준비하면 됨. (현실적으로 3번까지만 해도 잘한거...)
	 * 
	 * 1. 알고리즘
	 * 누적합, 구현, 그래프이론, DFS, BFS, 트리순회, 완탐, 백트래킹, 비트마스킹, 그리디, 라인스위핑, 투포인터, LIS, 이분탐색, DP, 최단거리, 펜윅트리
	 * 수준은 백준 플레티넘 수준까지 풀고 최소 다 합쳐서 160문제는 풀어야 함.
	 * (개인적으로는 백준 골드, 프로그래머스 3레벨이면 통과한다고 생각함...)
	 * 
	 * 2. 프로젝트
	 * 내가 가고싶은 기업의 채용공고 확인. 단, 우선순위는 맨 앞부터
	 * (기업이 한줄한줄 그냥 적는게 아님)
	 * 프로젝트를 진행할 때는 해당 기술에 대한 깊은 이해를 하기!
	 * 나같은 경우는 Node.js에 대해서 깊게 공부하자...
	 * 
	 * 3. CS
	 * 디자인패턴, 네트워크, 운영체제, 자료구조, 데이터베이스
	 * 인프런에서는 CS지식의 정석 / 무료강의는 KMOOC
	 * 널널한 개발자님은 인프런도 있고 무료강의도 있음.
	 * 책 + 강의 + 면접인터뷰 구글링의 조합으로 CS를 단단하게 다지기
	 * 
	 * 4. 오픈소스
	 * 이게 가장 어려움... (사실 이정도면... 진짜 천재지)
	 * 유명한 오픈소스에 기여하는게 제일 좋음 (star 1만 이상)
	 * 프로젝트를 잘 분석해서 메인테이너가 아닌 컨트리뷰터가 되는게 목표
	*/

	/**
	 * 알고리즘을 공부하는 자세
	 * 
	 * 1. 집중하자
	 * 혼자 알고리즘을 공부할 때는 항상 핸드폰을 끄고 초집중해서 공부를 하시는 것을 추천.
	 * 또한 하루에 3~4시간은 해야 실력을 늠. 다음은 푸는 방법이다.
	 * 1) 고민: 1시간정도
	 * 2) 문제풀이
	 * 3) 답지보며 자신의 코드와 비교
	 * 4) 만약 틀릴 경우 일주일 내내 틀린 문제를 처음부터 다시 풀기
	 * (이 문제를 처음 봤을 때 30분내에 풀정도로)
	 * 
	 * 2. 다양하게 풀자
	 * 다양하게 풀 생각을 해야 함.
	 * 어떠한 문제를 예를 들어 void형 함수를 구현해서 풀었다고 가정을 한다면
	 * 그 다음에는 int형으로 구현을 하거나 vector<int>형을 리턴하는 함수등
	 * 어떠한 것을 다양하게 리턴하는 함수로 만들어서 푸는 훈련또한 해야 함.
	 * 
	 * 3. 손코딩하라
	 * 손코딩은 필수. 어느정도 난이도의 문제는 손코딩을 하지 않고 풀 수 도 있지만
	 * 먼저 이렇게 풀겠다. 감을 잡고 들어가는데 있어서 손코딩을 하는게 좋음.
	 * 또한 만약에 못 풀었을 경우에도 손코딩으로 복습하는 것도 추천함.
	 * 손코딩이라는 것은 별거 아님. 자신이 이해하는 수준으로 코드를 손으로 쓰는 것을 말함.
	*/

	return 0;
}